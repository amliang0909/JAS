<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Peak calling for CLIP-Seq data by omniCLIP</title>
    <link href="/2024/09/25/Peak-calling-for-CLIP-Seq-data-by-omniCLIP/"/>
    <url>/2024/09/25/Peak-calling-for-CLIP-Seq-data-by-omniCLIP/</url>
    
    <content type="html"><![CDATA[<h3 id="Peak-calling-for-CLIP-Seq-data-by-omniCLIP"><a href="#Peak-calling-for-CLIP-Seq-data-by-omniCLIP" class="headerlink" title="Peak calling for CLIP-Seq data by omniCLIP"></a>Peak calling for CLIP-Seq data by omniCLIP</h3><p><strong>————————————</strong></p><h2 id="1-data-preparation"><a href="#1-data-preparation" class="headerlink" title="1. data preparation"></a>1. data preparation</h2><h4 id="1-1-data"><a href="#1-1-data" class="headerlink" title="1.1). data"></a>1.1). data</h4><p><strong>GSE98188</strong> from paper : </p><p>  Drosophila Sister-of-Sex-lethal reinforces a male-specific gene expression pattern by controlling Sex-lethal alternative splicing.  </p><p>  <em>Nucleic Acids Res</em> 2019</p><p> <strong>data download</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">iCLIP <span class="hljs-keyword">in</span> SL2 cells</span><br>lftp -e &#x27;pget -n 15 -c &quot;ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR548/007/SRR5480967/SRR5480967.fastq.gz&quot;;exit&#x27; # Similar methods for other samples.<br></code></pre></td></tr></table></figure><h4 id="1-2-data-clean"><a href="#1-2-data-clean" class="headerlink" title="1.2). data clean"></a>1.2). data clean</h4><p> <strong>Since the paper did not provide the adapter sequences and the length and position of the UMI</strong>.</p><p> I  tried different methods  to mark and remove the UMI and adapter.</p><p> <strong>a). remove adapter</strong></p><p>To detect the adapter sequences used, I first processed the raw sequencing data with trim_galore.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls ../*fastq.gz |while read id;do (trim_galore --quality 20  --length 20 -o ./ $id);done<br></code></pre></td></tr></table></figure><p><img src="/2024/09/25/Peak-calling-for-CLIP-Seq-data-by-omniCLIP/remove%20adapter.png" alt="remove adapter"></p><p>Based on the “auto-detection adapter” in the above figure, we can infer that the adapter sequence is AGATCGGAAGAGC.</p><p>The same processing method was applied to the other samples as well.   </p><p>Therefore,  removing the adapter from the raw sequence data based on the sequences identified above.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in *.fastq.gz;<br>do<br>id=$&#123;i%.fastq.gz&#125;<br>echo $i,$id<br>cutadapt -q 25 -a AGATCGGAAGAGC  --overlap=3 -n 1 -m 24 -o $&#123;id&#125;_cutadap.fastq.gz  $&#123;id&#125;.fastq.gz<br>done<br></code></pre></td></tr></table></figure><p> <strong>b). mark UMI</strong></p><p> I used the adapters-removed reads for a BLAST against the genome in flybase and found that there are always 10 unpaired  bases at the 5’ end of the reads. Therefore, I suspect these are the UMI, as shown in the figure below.</p><p>​<a href="mailto:&#x72;&#101;&#97;&#x64;&#45;&#64;&#x53;&#82;&#82;&#x35;&#x34;&#56;&#48;&#x39;&#54;&#55;&#x2e;&#49;&#49;">&#x72;&#101;&#97;&#x64;&#45;&#64;&#x53;&#82;&#82;&#x35;&#x34;&#56;&#48;&#x39;&#54;&#55;&#x2e;&#49;&#49;</a> 11&#x2F;1   length &#x3D; 53 bp       <img src="/2024/09/25/Peak-calling-for-CLIP-Seq-data-by-omniCLIP/reads%20blast%201.png" alt="reads blast 1">                         </p><p>​<a href="mailto:&#x72;&#x65;&#97;&#100;&#45;&#64;&#83;&#82;&#82;&#53;&#52;&#56;&#x30;&#57;&#54;&#55;&#46;&#x32;&#x31;&#56;">&#x72;&#x65;&#97;&#100;&#45;&#64;&#83;&#82;&#82;&#53;&#52;&#56;&#x30;&#57;&#54;&#55;&#46;&#x32;&#x31;&#56;</a> 218&#x2F;1   length &#x3D; 51 bp</p><p><img src="/2024/09/25/Peak-calling-for-CLIP-Seq-data-by-omniCLIP/reads%20blast%202.png" alt="reads blast 2"></p><p>Next, I used the <strong>flexbar</strong> software to mark the UMIs in the reads.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt;  barcodes.fa   # create a file, with 10 N (length of UMI is 10 bp)<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">umi</span><br>NNNNNNNNNN<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda activate py39<br><br>for i in *_cutadapt.fastq.gz;<br>do<br>id=$&#123;i%_cutadapt.fastq.gz&#125;<br>echo $i,$id<br>flexbar -r $&#123;id&#125;_cutadapt.fastq.gz  -b barcodes.fa --umi-tags -t $&#123;id&#125; -z GZ<br>done<br></code></pre></td></tr></table></figure><h3 id="2-omniCLIP-for-CLIP-Seq-peaks-calling"><a href="#2-omniCLIP-for-CLIP-Seq-peaks-calling" class="headerlink" title="2.omniCLIP for CLIP-Seq peaks calling"></a>2.omniCLIP for CLIP-Seq peaks calling</h3><h4 id="2-1-intsall-omniCLIP"><a href="#2-1-intsall-omniCLIP" class="headerlink" title="2.1). intsall omniCLIP"></a>2.1). intsall omniCLIP</h4><p><strong>download</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/philippdre/omniCLIP.git <br></code></pre></td></tr></table></figure><p><strong>create conda env</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd omniCLIP/<br>conda env create -f environment.yml<br>conda activate omniEnv<br></code></pre></td></tr></table></figure><p><strong>install</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 setup.py install<br></code></pre></td></tr></table></figure><h4 id="2-2-build-a-db-files-of-annotation-gtf"><a href="#2-2-build-a-db-files-of-annotation-gtf" class="headerlink" title="2.2). build a db files of annotation gtf"></a>2.2). build a db files of annotation gtf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /home/xuyz_g/soft/omniCLIP # programs can only run successfully in directory of omniCLIP，don&#x27;t know why<br><br>omniCLIP generateDB --gff-file /data1/amliang/annotation/fly/Drosophila_melanogaster.BDGP6.22.42.gff3 --db-file /data1/amliang/annotation/fly/flyase/gff/omniCLIP/dmel-all-r6.45.gff.db # <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">At the same time, you also need to prepare a reference genome sequence and divide it into chromosomes</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">like this <span class="hljs-keyword">in</span> : /data3/tmp_g/genome_anno/fly/genome/chroms</span><br>  2L.fa.gz<br>  2R.fa.gz<br>  3L.fa.gz<br>  3R.fa.gz<br>  4.fa.gz<br>  X.fa.gz<br>  Y.fa.gz<br></code></pre></td></tr></table></figure><h4 id="error"><a href="#error" class="headerlink" title="error"></a>error</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1) If an error message appears saying that like this:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   FileNotFoundError: [Errno 2] No such file or directory: <span class="hljs-string">&#x27;version.py&#x27;</span>,</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash"> just copy it from another directory to this directory.</span><br>cp /data1/tmp/soft/omniCLIP/version.py  yourPath/omniCLIP-0.2.0-py3.8-linux-x86_64.egg/omniCLIP/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2) <span class="hljs-keyword">if</span> a error shows:</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash"> File <span class="hljs-string">&quot;yourPath/omniCLIP/data_parsing/ParsingArgs.py&quot;</span>, line 44, <span class="hljs-keyword">in</span> parsing_argparse</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   NameError: name <span class="hljs-string">&#x27;verifying_args&#x27;</span> is not defined</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Just vim into ParsingArgs.py and comment out or delete this line of verifying_args : like picture</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/25/Peak-calling-for-CLIP-Seq-data-by-omniCLIP/debug.png" alt="debug"></p><h4 id="2-3-parsing-the-background-files"><a href="#2-3-parsing-the-background-files" class="headerlink" title="2.3). parsing the background files"></a>2.3). parsing the background files</h4><h6 id="Usually-RNA-SEQ-data-but-sometimes-input-data-is-used"><a href="#Usually-RNA-SEQ-data-but-sometimes-input-data-is-used" class="headerlink" title="(Usually RNA-SEQ data, but sometimes input data is used)"></a>(Usually RNA-SEQ data, but sometimes input data is used)</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">omniCLIP parsingBG --db-file /data3/tmp_g/projects/omniCLIP/dmel-all-r6.45.gff.db --genome-dir /data3/tmp_g/projects/omniCLIP/chroms/ --bg-files /data3/tmp_g/projects/SSX_CLIP/4.peak/Ctrl_IP1.bam --bg-files /data3/tmp_g/projects/SSX_CLIP/4.peak/Ctrl_IP2.bam  --out-file /data3/tmp_g/projects/SSX_CLIP/4.peak/CTRL.dat<br></code></pre></td></tr></table></figure><h4 id="4-parsing-the-CLIP-files"><a href="#4-parsing-the-CLIP-files" class="headerlink" title="4). parsing the CLIP files"></a>4). parsing the CLIP files</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">omniCLIP parsingCLIP --db-file /data3/tmp_g/projects/omniCLIP/dmel-all-r6.45.gff.db --genome-dir /data3/tmp_g/projects/omniCLIP/chroms/ --clip-files /data3/tmp_g/projects/SSX_CLIP/4.peak/Ssx_IP1.bam  --clip-files /data3/tmp_g/projects/SSX_CLIP/4.peak/Ssx_IP2.bam  --out-file /data3/tmp_g/projects/SSX_CLIP/4.peak/SSX.dat<br></code></pre></td></tr></table></figure><h4 id="5-Running-the-omniCLIP-algorithm"><a href="#5-Running-the-omniCLIP-algorithm" class="headerlink" title="5). Running the omniCLIP algorithm"></a>5). Running the omniCLIP algorithm</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">omniCLIP run_omniCLIP --db-file /data3/tmp_g/projects/omniCLIP/dmel-all-r6.45.gff.db  --bg-dat /data3/tmp_g/projects/SSX_CLIP/4.peak/CTRL.dat  --clip-dat /data3/tmp_g/projects/SSX_CLIP/4.peak/SSX.dat  --out-dir /data3/tmp_g/projects/SSX_CLIP/4.peak/reslut<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Bioinformatic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Brief Introduction</title>
    <link href="/2024/09/24/Jiang-A-Sheng/"/>
    <url>/2024/09/24/Jiang-A-Sheng/</url>
    
    <content type="html"><![CDATA[<p>Don’t think I’m boring !</p><p>This is just a test text !</p><p>There will be more interesting things to share later !</p><p>江阿生，是电影《剑雨》中一个隐藏民间的剑术高手，我很喜欢的一个武侠人物。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
